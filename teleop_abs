#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

#original file is turtlebot_obstacle
# Authors: Gilbert #

#edited by dean24

import rospy
import math
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist

#I'm not sure, but it kinda looks like you can't run this at the same time as teleop or something? Simply because the
#program has linear velocity and angular velocity hard coded. Maybe you could modify it to work with teleop though. -s
#Ok so I can't have it subscribe also to cmd_vel because it doesn't work that way, but
#is there a way I can have it print the linear velocity?? and change the stop distance accordingly?

#because for now to increase compatibility with teleop I was just gonna delete the LINEAR_VEL
#stuff, but I understand why it should be fixed so the safe stopping distance is accurate


STOP_DISTANCE = 0.2
LIDAR_ERROR = 0.05
SAFE_STOP_DISTANCE = STOP_DISTANCE + LIDAR_ERROR

class Obstacle():
    def __init__(self):
        self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)       #so this publishes Twist messages to cmd_vel -s
        self.obstacle()
    
    #this looks like a function tha tprocesses scans? dunno if I need to understand this for obstacle avoidance -s
    def get_scan(self):
        scan = rospy.wait_for_message('scan', LaserScan)                      #waits for scan messages from LaserScan -s
        scan_filter = []
       
        samples = len(scan.ranges)  # The number of samples is defined in 
                                    # turtlebot3_<model>.gazebo.xacro file,
                                    # the default is 360.
        samples_view = 1            # 1 <= samples_view <= samples
        
        if samples_view > samples:
            samples_view = samples

        if samples_view is 1:
            scan_filter.append(scan.ranges[0])

        else:
            left_lidar_samples_ranges = -(samples_view//2 + samples_view % 2)
            right_lidar_samples_ranges = samples_view//2
            
            left_lidar_samples = scan.ranges[left_lidar_samples_ranges:]
            right_lidar_samples = scan.ranges[:right_lidar_samples_ranges]
            scan_filter.extend(left_lidar_samples + right_lidar_samples)

        for i in range(samples_view):
            if scan_filter[i] == float('Inf'):
                scan_filter[i] = 3.5
            elif math.isnan(scan_filter[i]):
                scan_filter[i] = 0
        
        return scan_filter


    def obstacle(self):
        twist = Twist()
        turtlebot_moving = True

        while not rospy.is_shutdown():              #while the program is still running
            lidar_distances = self.get_scan()
            min_distance = min(lidar_distances)

            if min_distance < SAFE_STOP_DISTANCE:   #if the closest lidar distance to the robot is less than safe stopping distance -s
                if turtlebot_moving:                #stop the robot immediately!! -s
                    twist.linear.x = 0.0
                    twist.angular.z = 0.0
                    self._cmd_pub.publish(twist)
                    rospy.loginfo('Stop!')

                    while turtlebot_moving == True:
                        twist.linear.x = 0.0
                        twist.angular.z = 0.0
                        self._cmd_pub.publish(twist)
                        #prompt the user to ask if turtle stopped in teleop
                        ready2move = input("Is the turtle stopped inteleop?": )
                        if ready2move.strip().capitalize() == "Yes":
                            turtlebot_moving = False
                            break
                        else:  
                            turtlebot_moving = True
            else:
                #twist.linear.x = LINEAR_VEL         #otherwise, keep the linear x the same, don't turn? wonder why
                #twist.angular.z = 0.0
                #self._cmd_pub.publish(twist)
                turtlebot_moving = True
                rospy.loginfo('Distance of the obstacle : %f', min_distance)

def main():
    try: 
        rospy.init_node('turtlebot3_obstacle')
        pub = rospy.Publisher('turtlebot3/final_vel', Twist, queue_size=1000) #new publisher that will publish the final moves for turtlebot
        rospy.Subscriber('turtlebot3/cmd_vel', Twist, Obstacle, queue_size=1000)        #subscribes to cmd_vel, which teleop publishes to
        
        #obstacle = Obstacle()
    except rospy.ROSInterruptException:
        pass

if __name__ == '__main__':
    main()
